<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
	<groupId>com.easy</groupId>
	<artifactId>easy_a</artifactId>
	<packaging>jar</packaging>
	<version>1.0.0-SNAPSHOT</version>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<optional>true</optional>
			<scope>compile</scope>
			<!--
			简单来说，compile、runtime和provided的区别，需要在执行mvn package命令，且打包格式是war之类（而不是默认的jar）的时候才能看出来。
			通过compile和provided引入的jar包，里面的类，你在项目中可以直接import进来用，编译没问题，但是runtime引入的jar包中的类，
			项目代码里不能直接用，用了无法通过编译，只能通过反射之类的方式来用。通过compile和runtime引入的jar包，会出现在你的项目war包里，
			而provided引入的jar包则不会。
			compile， 缺省值，适用于所有阶段，会随着项目一起发布。

			  provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet-api-2.3.jar。
			  runtime， 在运行时使用，如JDBC驱动，适用运行和测试阶段。   如plexus-utils-1.1.jar
			  test     只在测试时使用，用于编译和运行测试代码。不会随项目发布。如Junit-3.8.1.jar
			  system， 类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。
			-->
		</dependency>
	</dependencies>
   <build>
		<finalName>easy_a</finalName>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!--<outputdirectory>${project.build.directory}/lib</outputdirectory>-->
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>


</project>
